#!/bin/zsh

sudo launchctl limit maxfiles 256 unlimited
sudo launchctl limit maxfiles 128000 524288

source <(kubectl completion zsh)
source <(minikube completion zsh)

export NVM_SYMLINK_CURRENT=true
export SEARCHPATHS=~/Projects:$SEARCHPATHS

# BAYER
export VAULT_ADDR='https://vault.agro.services'

# CLIMATE
export M2_HOME=$SDKMAN_CANDIDATES_DIR/maven/current
export BROWSER=vivaldi
export ELECTRON_ENABLE_LOGGING=1
#export TARGET_ENV=production
#export TCC_ENV=dev
#export NODE_ENV=production
export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv

alias run-stv="docker run --hostname "tools.tcc.lix" -d -it -p 80:8080 -e TCC_ENV=ci stv:latest"

alias cd1="cd .."
alias cd2="cd ../../"
alias cd3="cd ../../../"
alias cd4="cd ../../../../"
alias cd5="cd ../../../../../"
alias suno="sudo nano"
alias gs="git status"
alias gr="git remote show origin"
alias gpl="git pull"
alias gl="git log"
alias gitam='git add -A && git ci --date="now" --am --allow-empty'
alias gitrmmerged='git branch --merged | egrep -v "(^\*|master|dev)" | xargs git branch -d'
alias gprune='git branch --merged | egrep -v "(^\*|master|dev)" | xargs git branch -D'
alias s-za="nano ~/local-config/.zsh_aliases"
alias s-zsh="nano ~/.zshrc"
alias ll="ls -la"
alias lst="ls -lat"
alias sourcez="source ~/.zshrc"
alias lsfiles="tree -aphufi"
#alias b-ssh="sudo launchctl unload /System/Library/LaunchDaemons/ssh.plist && sudo launchctl load /System/Library/LaunchDaemons/s$
alias lock="pmset displaysleepnow"
alias myip="host myip.opendns.com resolver1.opendns.com"
alias ps-node="ps aux|grep node"
alias killallnode="sudo pkill -f node && pgrep node | xargs sudo kill -9"
alias docker-prune="docker container  prune -f && docker image prune -f"
alias docker-rmi="docker images -a | grep '$1' | awk '{print $3}' | xargs docker rmi"
alias ps-docker="docker ps -a"
alias nomcafee="sudo launchctl unload /Library/LaunchDaemons/com.mcafee.*"
alias idea-aliases="idea  ~/local-config/.zsh_aliases"




#	TCC
#alias update-aws="$(envmgr -e ci --region us-east-1 --role rose-imagery); $(aws ecr get-login --no-include-email --region us-east-1)"
alias aws-console="envmgr -E production -R rose-imagery --aws-console"
alias itp-rdi="docker run --rm -it itp-fe bash"
alias itp-rdc="docker run --rm -v ${PWD}:/tools-portal -p 3000:3000 itp-fe"
alias itp-bdi="docker build -t itp-fe:latest -f Dockerfile.local ."
alias itpbe-units="mvn clean test -Dspring.profiles.active=dev -DexcludedGroups=TestWithTestContainer -DGroups=woot"
alias itpbe-int="mvn clean verify -Dspring.profiles.active=production -DexcludedGroups=TestWithTestContainer -DSTACK=BLUE -DGroups=$1"
alias itp-run-be="mvn spring-boot:run"
alias splunk-query='tools-portal-backend | spath "attrs.TCC_ENV" | search "attrs.TCC_ENV"="production" "attrs.SERVICE_NAME"="tools-portal-backend"'
alias cyspec="yarn run cypress run --browser chrome --headless -C ./cypress/config/cypress-units.json --spec "
alias aws-clear="envmgr --clear-cache"
#alias ol-role="eval $(envmgr -E production -R orchestration-layer)"
alias aws-roles="envmgr --list-roles"
alias env-ids="envmgr -l"
alias re-link="yarn unlink @tcc-ol/dde-eva-ol-package && yarn link @tcc-ol/dde-eva-ol-package"
alias tcclocal="export TCC_ENV=local; export TCC_ACCOUNT=local"
alias tccdev="export TCC_ENV=dev"
alias metaknight-jwt="sbt 'runMain com.climate.metaknight.utilscripts.GenerateJwt'"
alias run-mocks="docker-compose -f docker-compose-mock.yaml up"
alias artifactory-auth="curl --header 'Authorization: bearer ${ARTIFACTORY_SVC_ACCT_PWD}' 'https://bin.tcc.li/api/system/ping' -v -v -v"
alias lein28="/Users/stephen.wille/Projects/gaia/mosaic/dev-resources/lein28"
alias bounce-gradle-build="./gradlew --stop; ./gradlew build; ./gradlew --stop"

export PROXY_USERNAME=phillip.wille
export PROXY_PASSWORD=$(security find-generic-password -s "okta" -w)
export GITLAB_TOKEN=$(security find-generic-password -s "gitlab-token" -w)
export PATH="/usr/local/opt/mysql-client/bin:$PATH"
export ARTIFACTORY_SVC_ACCT="${PROXY_USERNAME}@climate.com"
export ARTIFACTORY_HOST="bin.tcc.li"
export ARTIFACTORY_URL="https://${ARTIFACTORY_HOST}"
export ARTIFACTORY_SVC_ACCT_PWD=$(security find-generic-password -s "Artifactory 1yr token" -w)

function find-dir(){
  # find directory - fd -t d -g rose .
  fd -t d $1 ~/Projects/
}

function noset(){
  nosetests -v --tests=$1 --with-coverage --cover-html --cover-html-dir=target/cover_scheduled_ingest
}

function setuppyenv(){
    python3 -m venv venv &&
    source venv/bin/activate &&
    python -m pip install --upgrade pip &&
    python -m pip install python-gitlab boto3

}
function sbt-test-only() {
	sbt "test:testOnly *$1" 
}



function aws-prod() {
  export TCC_ENV=production
  role=${1:-"rose-imagery"}
  eval $(envmgr -E $TCC_ENV --region us-east-1 -R $role)

  aws ecr get-login-password --region us-east-1 |
    docker login --username AWS \
      --password-stdin 747953286079.dkr.ecr.us-east-1.amazonaws.com

  env-update
}
function aws-ci() {
  export TCC_ENV=ci
  eval $(envmgr -E $TCC_ENV --region us-east-1 -R rose-imagery)

  aws ecr get-login-password --region us-east-1 |
    docker login --username AWS \
      --password-stdin 747953286079.dkr.ecr.us-east-1.amazonaws.com

  env-update
}
function aws-dde() {
  eval $(envmgr -E production -R dde-general)
  env-update
}
function aws-ol() {
  eval $(envmgr -E production -R orchestration-layer)
  env-update
}
function aws-phasr() {
    export TCC_ENV=production

    eval $(envmgr -E $TCC_ENV --region us-east-1 -R phasr_enhanced-developer)
    env-update
}
function aws-rose-fvc() {
    eval $(envmgr -E fvc --region us-east-1 -R rose-imagery)
    env-update
}

function add-evn-param() {
  # env, param name, value
  params add $1.secure.team-btr.itp.$2 $3
  # params decrypt qa1.secure.team-btr.itp.CYPRESS_E2E_USER
}
function env-update() {
  export JAVA_TOOL_OPTIONS="-Dhttp.proxyHost=localhost -Dhttp.proxyPort=3128 -Dhttps.proxyHost=localhost -Dhttps.proxyPort=3128"

  printenv
}
function assume-role() {
  aws sts assume-role \
    --role-session-name stv-test \
    --role-arn arn:aws:iam::$1:role/stv-test \
    --query "Credentials"
}
function get-ssm-param() {
  aws ssm get-parameter --region us-east-1 \
    --name $1 \
    --with-decryption \
    --output json
}

function get-secretsmanager-param(){
  aws secretsmanager get-secret-value \
    --region us-east-1 \
    --secret-id $1
}

function bounce-climate-proxy() {
  export http_proxy='http://localhost:3128'
  export HTTP_PROXY='http://localhost:3128'
  export https_proxy='http://localhost:3128'
  export HTTPS_PROXY='http://localhost:3128'
  export NO_PROXY='localhost'

  ~/bin/local-proxy.sh stop;

  docker network prune -f

  ~/bin/local-proxy.sh start;
}

function set-fbstac-token() {
    export FBSTAC_TOKEN=$(curl --location --request POST 'https://login.microsoftonline.com/fcb2b37b-5da0-466b-9b83-0014b67a7c78/oauth2/v2.0/token' \
    --header 'Cookie: fpc=AuP-IPY8bJJJtO7BvvT3RYiE7lRdAQAAACj50NsOAAAAl0ZoRAEAAACk-dDbDgAAAA; stsservicecookie=estsfd; x-ms-gateway-slice=estsfd' \
    --form 'grant_type="client_credentials"' \
    --form 'client_id="cd839327-7e42-416f-bc91-c3798d41086e"' \
    --form 'client_secret="n8X8Q~-9TeBdLvD~rrPnsyVOBlhlhllkIBdHraBd"' \
    --form 'scope="https://farmbeats.azure.net/.default"' | jq '.access_token')
}

function proxy-test(){
  if [[ -z $1 ]]
    then url="https://kirby.production.tcc.services"
    else url=$1
  fi

  echo "url: $url"
  curl -iv -o /dev/null \
    -x http://localhost:3128 \
    $url
}

function ssh-jumpbox() {
   ssh -l phillip.wille -vvv -o StrictHostKeyChecking=no \
   -L $1 \
   -p 2222 \
   -N jump.production.tcc.services
}

function itp-be-start() {
  cd ~/Projects/btr/tools-portal-backend
  mvn clean install -DskipTests
  aws-update $1
  cd ./application
  mvn spring-boot:run -Dspring.profiles.active=${TCC_ENV}
}
function fvweb-setup() {
  eval $(envmgr -e ci --region us-east-1 --role phasr_enhanced-developer)
  aws ecr get-login-password --region us-east-1 |
    docker login --username AWS \
      --password-stdin 747953286079.dkr.ecr.us-east-1.amazonaws.com

  env-update

  params decrypt qa1.rds.fvcab.fieldviewplusPrecisionWebDbUser
  params decrypt qa1.rds.fvcab.fieldviewplusPrecisionWebDbPassword
}


function docker-exec() {
    docker exec -it $1 /bin/sh
}
function docker-stop-all(){
	$(docker ps -aq | xargs docker stop | xargs docker rm)
}
function docker-rm-all(){
        docker kill $(docker ps -a -q)
}
function docker-rmi-all(){
        docker kill $(docker images -q)
}

# minikube/k8
function bounce-minikube() {
    minikube stop
    sudo brew services restart socket_vmnet
    minikube start --driver qemu --network socket_vmnet
}

function mvntree() {
  mvn dependency:tree -Dincludes=$1
}
function sonar() {
  sonar-scanner \
    -Dsonar.projectKey=itp-fe_js-ts-jsx-sass \
    -Dsonar.sources=. \
    -Dsonar.host.url=https://sonarqube.ci.tcc.services \
    -Dsonar.login=050c554140137617e5a6aabeec86fd441a295a4c
}
function ps-svc() {
  ps aux | grep $1
}
function svc-port(){
    if [[ -z $1 ]]
      then port=8080
      else port=$1
    fi
	lsof -nRVL -i:$port
}

function greptxt() {
    sudo grep -Hirn "$1" $2
}
# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"                    # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # bash completion

# Setting PATH for Python 2.7
# The original version is saved in .bash_profile.pysave
#export PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}"
#export PATH

# SDKMan
#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
#. /Users/stephen/.sdkman/bin/sdkman-init.sh
#export SDKMAN_DIR="${HOME}/.sdkman"
#[[ -s "${HOME}/.sdkman/bin/sdkman-init.sh" ]] && source "${HOME}/.sdkman/bin/sdkman-init.sh"
