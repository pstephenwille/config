#!/bin/zsh
export BROWSER=vivaldi
export ELECTRON_ENABLE_LOGGING=1
#export TARGET_ENV=production
#export TARGET_ENV=development
#export CYPRESS_E2E_USER=itp-se@climate.com
#export CYPRESS_E2E_PWD=SETITestAccount!@
#export TCC_ENV=production

# params add qa1.secure.team-btr.itp.CYPRESS_USERNAME woot
# qa1 internaltools@climate.com SETITestAccount!@
# btr_test.user+01@climate.com T3st-T3st
# prod: itp-se@climate.com SETITestAccount!@
# qa1: itp-se@climate.com SETITestAccount!@

alias cd1="cd .."
alias cd2="cd ../../"
alias cd3="cd ../../../"
alias cd4="cd ../../../../"
alias cd5="cd ../../../../../"
alias suno="sudo nano"
alias gs="git status"
alias gr="git remote show origin"
alias gpl="git pull"
alias gl="git log"
alias gitam='git add -A && git ci --date="now" --am --allow-empty'
alias gitrmmerged='git branch --merged | egrep -v "(^\*|master|dev)" | xargs git branch -d'
alias gprune='git branch --merged | egrep -v "(^\*|master|dev)" | xargs git branch -D'
alias s-za="nano ~/local-config/.zsh_aliases"
alias s-zsh="nano ~/.zshrc"
alias ll="ls -la"
alias lst="ls -lat"
alias sourcez="source ~/.zshrc"
alias lsfiles="tree -aphufi"
#alias b-ssh="sudo launchctl unload /System/Library/LaunchDaemons/ssh.plist && sudo launchctl load /System/Library/LaunchDaemons/s$
alias lock="pmset displaysleepnow"
alias myip="host myip.opendns.com resolver1.opendns.com"
alias psnode="ps aux|grep node"
alias killallnode="sudo pkill -f node && pgrep node | xargs sudo kill -9"
alias lp-pwd="p.stephenwille@gmail.com woot"
alias docker-prune="docker container  prune -f && docker image prune -f"
alias docker-rmi="docker images -a | grep '$1' | awk '{print $3}' | xargs docker rmi"

#	TCC
#alias update-aws="$(envmgr -e ci --region us-east-1 --role btr-general); $(aws ecr get-login --no-include-email --region us-east-1)"
alias itp-rdi="docker run --rm -it itp-fe bash"
alias itp-rdc="docker run --rm -v ${PWD}:/tools-portal -p 3000:3000 itp-fe"
alias itp-bdi="docker build -t itp-fe:latest -f Dockerfile.local ."
alias itpbe-units="mvn clean test -Dspring.profiles.active=dev -DexcludedGroups=TestWithTestContainer -DGroups=woot"
alias itpbe-int="mvn clean verify -Dspring.profiles.active=production -DexcludedGroups=TestWithTestContainer -DSTACK=BLUE -DGroups=$1"
alias itp-run-be="mvn spring-boot:run"
alias splunk-query='tools-portal-backend | spath "attrs.TCC_ENV" | search "attrs.TCC_ENV"="production" "attrs.SERVICE_NAME"="tools-portal-backend"'
alias cyspec="yarn run cypress run --browser chrome --headless -C ./cypress/cypress-units.json --spec "

export PROXY_USERNAME=phillip.wille
export PROXY_PASSWORD="okta2Y@rB19S"



function sonar(){
sonar-scanner \
  -Dsonar.projectKey=itp-fe_js-ts-jsx-sass \
  -Dsonar.sources=. \
  -Dsonar.host.url=https://sonarqube.ci.tcc.services \
  -Dsonar.login=050c554140137617e5a6aabeec86fd441a295a4c
}

function add-evn-param(){
	#env, param name, value
	params add $1.secure.team-btr.itp.$2 $3
	# params decrypt qa1.secure.team-btr.itp.CYPRESS_E2E_USER
}
function env-update(){
        export CYPRESS_E2E_USER=$(params decrypt ${TCC_ENV}.secure.team-btr.itp.CYPRESS_E2E_USER)
        export CYPRESS_E2E_PWD=$(params decrypt ${TCC_ENV}.secure.team-btr.itp.CYPRESS_E2E_PWD)

        export CYPRESS_E2E_TEST_USER=$(params decrypt ${TCC_ENV}.secure.team-btr.itp.CYPRESS_E2E_TEST_USER)
        export CYPRESS_E2E_TEST_USER_PWD=$(params decrypt ${TCC_ENV}.secure.team-btr.itp.CYPRESS_E2E_TEST_USER_PWD)

	printenv
}

function aws-prod() {
  $(envmgr -e production --region us-east-1 --role btr-general)
 	aws ecr get-login-password --region us-east-1 | \
	docker login --username AWS \
	--password-stdin 747953286079.dkr.ecr.us-east-1.amazonaws.com

	env-update
}

function aws-ci() {
        $(envmgr -e ci --region us-east-1 --role btr-general)
      	aws ecr get-login-password --region us-east-1 | \
      	docker login --username AWS \
      	--password-stdin 747953286079.dkr.ecr.us-east-1.amazonaws.com

        env-update
}

function climate-proxy() {
    docker run --rm -p 3128:3128 --name local-proxy -d \
    -e PROXY_USERNAME=$PROXY_USERNAME \
    -e PROXY_PASSWORD=$PROXY_PASSWORD \
    -it 747953286079.dkr.ecr.us-east-1.amazonaws.com/cloudeng/local-proxy
}

function itp-be-start {
	cd ~/Projects/btr/tools-portal-backend
	mvn clean install -DskipTests
	aws-update $1
	cd ./application
	mvn spring-boot:run -Dspring.profiles.active=${TCC_ENV}
}

# FVWeb
function fvweb-setup(){
        eval `envmgr -e ci --region us-east-1 --role phasr_enhanced-developer`
        aws ecr get-login-password --region us-east-1 | \
        docker login --username AWS \
        --password-stdin 747953286079.dkr.ecr.us-east-1.amazonaws.com

        env-update

	params decrypt qa1.rds.fvcab.fieldviewplusPrecisionWebDbUser
	params decrypt qa1.rds.fvcab.fieldviewplusPrecisionWebDbPassword
}


#   nix
#pkill -f xbindkeys; xbindkeys &

sudo launchctl limit maxfiles 65536 2147483000


function ps-svc {
	ps aux|grep $1
}

function install() {
  sudo apt-get install -y $1
}

function tcptraffic() {
  sudo tcpdump -i $1 -va
}

# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"                    # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # bash completion

# Setting PATH for Python 2.7
# The original version is saved in .bash_profile.pysave
export PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}"
# export PATH

# SDKMan
#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
#. Users/stephen.wille/.sdkman/bin/sdkman-init.sh
#export SDKMAN_DIR="${HOME}/.sdkman"
#[[ -s "${HOME}/.sdkman/bin/sdkman-init.sh" ]] && source "${HOME}/.sdkman/bin/sdkman-init.sh"
